#!/usr/bin/env python
"""
Node to Visualize controller
"""
from turtle import color
from attr import has
from matplotlib import collections
import rospy
import numpy as np
from sensor_msgs.msg import Image
from vservo.msg import Point2D, Point2DArray
from geometry_msgs.msg import Pose, Twist
from std_msgs.msg import String
from std_srvs.srv import Trigger, TriggerResponse
import cv2
from cv_bridge import CvBridge
import utils
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon
from pathlib import Path
from mpl_toolkits.mplot3d import Axes3D
import ros_numpy

class ControlVisualizer():
    """
    Visualize target, current feature and more by overlaying camera image
    """

    def __init__(self) -> None:
        """
        Constructor
        """

        _camera_matrix_dict = rospy.get_param("camera_matrix")
        _camera_matrix = np.array(_camera_matrix_dict['data'])
        self.camera_matrix = np.reshape(_camera_matrix, (_camera_matrix_dict['rows'], _camera_matrix_dict['cols']))

        self.target_points = None
        self.feature_points = None
        self.cmd_vel = None
        self.pose = None

        self.dataLogger = ControlDataLogger() # instance for logging the data and generating plots

        self.bridge = CvBridge() # bridge to convert between ROS image format and opencv image format

        self._sub = rospy.Subscriber("camera_node/image_raw", Image, self.image_received)
        self._sub3 = rospy.Subscriber("ibvs_features", Point2DArray, self.feature_update_received) 
        self._sub4 = rospy.Subscriber("cmd_vel",Twist, self.command_update_received)
        self._sub5 = rospy.Subscriber("estimated_pose",Pose, self.pose_update_received)

        self._pub = rospy.Publisher("image_control_overlay", Image, queue_size=20)

        self._serv = rospy.Service("generate_plot", Trigger, self.dataLogger.plot_system_behavior)

        _target_str = rospy.get_param("target")
        _target = np.reshape(np.fromstring(_target_str, dtype=int, sep=','),(4,2))
        self.target_points=utils.conv_norm_2_pix(_target, self.camera_matrix)

        

    def feature_update_received(self, data) -> None:
        self.feature_points = utils.conv_Point2DArray_2_nparray(data)
        return
    
    def command_update_received(self, data) -> None:
        self.cmd_vel = data
        if self.control_is_active():
            # Update the Control Logger with each control update
            self.dataLogger.update_data(self.feature_points, self.cmd_vel, self.pose)
        return
    
    def pose_update_received(self, data) -> None:
        self.pose = data
        return


    def control_is_active(self) -> bool:
        _c = self.cmd_vel
        is_active=set()
        is_active.add(_c.linear.x)
        is_active.add(_c.linear.y)
        is_active.add(_c.linear.z)
        is_active.add(_c.angular.x)
        is_active.add(_c.angular.x)
        is_active.add(_c.angular.x)
        return is_active != {0} # return true if any of the cmd_vel is nonzero, meaning control is active

    def image_received(self, image_message : Image) -> None:
        # generate overlay visualization
        frame = ros_numpy.numpify(image_message)
        overlay_frame = self.overlay_image(frame.copy())
        self._pub.publish(ros_numpy.msgify(Image, overlay_frame.astype(np.uint8), encoding='rgb8')) # convert opencv image to ROS
        return

        
    
    def overlay_image(self, frame) -> None:
        # overlay a red box where the target is 
        if not np.array(self.target_points==None).any():
            cv2.polylines(frame, 
                [self.target_points],
                isClosed = True,
                color = (255,0,0), # red
                thickness = 3)

        # overlay a green box where the feature is 
        if not np.array(self.feature_points==None).any():
            cv2.polylines(frame, 
                [self.feature_points],
                isClosed = True,
                color = (0,255,0), # green
                thickness = 3)
        
        # overlay arrows
        if not np.array(self.feature_points==None).any() and not np.array(self.target_points==None).any():
            for arrowpoints in np.concatenate((self.feature_points, self.target_points), axis=1):
                cv2.arrowedLine(frame,
                        (arrowpoints[0], arrowpoints[1]),
                        (arrowpoints[2], arrowpoints[3]),
                        color = (66,117,245), # blue
                        thickness = 2)

        # overlay origin of x,y coordinate system                    
        _c_u = int(self.camera_matrix[0,2])
        _c_v = int(self.camera_matrix[1,2])
        _f_x = int(self.camera_matrix[0,0])
        _f_y = int(self.camera_matrix[1,1])
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.arrowedLine(frame,
                        (_c_u, _c_v),
                        (_c_u+50, _c_v),
                        color = (0,0,0), # black
                        thickness = 2)
        cv2.putText(frame, 'x', (_c_u+55, _c_v), font, 1, (0, 0, 0), 2, cv2.LINE_AA)
        cv2.arrowedLine(frame,
                        (_c_u, _c_v),
                        (_c_u, _c_v+50),
                        color = (0,0,0), # black
                        thickness = 2)
        cv2.putText(frame, 'y', (_c_u+10, _c_v+60), font, 1, (0, 0, 0), 2, cv2.LINE_AA)

        return frame
        


class ControlDataLogger():
    """
    Collect control data over time:
    Cornerpoints, Control Effort and 3D Pose
    Create plot from collected data
    """
    def __init__(self, cornerpoints=[], controlefforts=[], poses=[], time=[]) -> None:
        """
        If data is passed to the function (e.g. data saved from another experiment) the data is loaded
        IF no data is passed, empty lists are initialized waiting for the update_data method to fill them
        """
        # store data in list, will be appended in each step
        self.cornerpoints = cornerpoints
        self.controlefforts = controlefforts
        self.poses = poses
        self.time = time
        
    def update_data(self, cornerpoint : Point2DArray, controleffort : Twist, pose : Pose) -> None:
        """
        Append new data on the right side 
        """
        self.cornerpoints.append(cornerpoint)
        self.controlefforts.append(controleffort)
        self.poses.append(pose)
        self.time.append(rospy.get_time())


    def plot_system_behavior(self, request) -> TriggerResponse: # service function
        # define and adjust figure
        plt.ioff() # turn off interactive mode
        plt.rcParams.update({'font.size': 12, 'mathtext.fontset' : 'stix', 'font.family' : 'STIXGeneral'})
        plt.tight_layout()
        fig = plt.figure(figsize=(7,7), facecolor='#FFFFFF')
        ax_cornerpoints = fig.add_subplot(2,2,1)
        ax_poses = fig.add_subplot(2,2,2,projection='3d')
        ax_controlefforts = fig.add_subplot(2,2,3)
        
        ax_cornerpoints.set_facecolor('#FFFFFF')
        ax_cornerpoints.set_aspect(1,adjustable='datalim') # equal aspect ratio of axes
        ax_poses.set_facecolor('#FFFFFF')
        ax_controlefforts.set_facecolor('#FFFFFF')

        ax_cornerpoints.grid()
        ax_controlefforts.grid()



    ### SUBPLOT 1 ### : Plot the path of the corners and the outline of the starting and end position
        # check if data is available
        if (np.array(self.cornerpoints)==None).all():
            response = TriggerResponse()
            response.success = False
            response.message = "Plot aborted - Some of the data required for the plots is missing"
            return response

        # plot original position of marker
        points = self.cornerpoints[0] # first element of the list 
        ax_cornerpoints.add_patch(Polygon(points, 
                                        edgecolor='tab:red',
                                        facecolor=(0,0,0,0), # transparent
                                        linestyle="-",
                                        linewidth=2,
                                        closed=True))

        # plot path of corners
        cornerpoints=np.zeros((0,4,2)) # initialize 3D array (zero length stack of 2D 4 by 2 matrices)
        for point in self.cornerpoints:
            cornerpoints = np.append(cornerpoints, np.reshape(point,(1,4,2)), axis=0)
        #     cornerpoints = np.append(cornerpoints,np.reshape(point,(1,4,2)), axis=0) # stack the matrices
        ax_cornerpoints.scatter(cornerpoints[:,0,0], cornerpoints[:,0,1], s=10, color='tab:blue') # plot path of first cornerpoint
        ax_cornerpoints.scatter(cornerpoints[:,1,0], cornerpoints[:,1,1], s=10, color='tab:orange') # plot path of second cornerpoint
        ax_cornerpoints.scatter(cornerpoints[:,2,0], cornerpoints[:,2,1], s=10, color='tab:purple') # plot path of third cornerpoint
        ax_cornerpoints.scatter(cornerpoints[:,3,0], cornerpoints[:,3,1], s=10, color='tab:cyan') # plot path of fourth cornerpoint

        # plot final position of marker
        points = self.cornerpoints[-1] # last element of the list
        ax_cornerpoints.add_patch(Polygon(points, 
                                        edgecolor='tab:green',
                                        facecolor=(0,0,0,0), # transparent
                                        linestyle="-",
                                        linewidth=2,
                                        closed=True))

    ### SUBPLOT 2 ### : Plot the 6 values of cmd_vel over time
        # check if data is available
        if (np.array(self.controlefforts)==None).all():
            response = TriggerResponse()
            response.success = False
            response.message = "Plot aborted - Some of the data required for the plots is missing"
            return response

        controleffs=np.zeros((0,6,1)) # initialize 3D array (zero length stack of 2D 4 by 2 matrices)
        for controleff_twist in self.controlefforts:
            # if controleff_twist == None:
            #     continue
            controleff = np.zeros((1,6,1))
            controleff[0,0,0] = controleff_twist.linear.x
            controleff[0,1,0] = controleff_twist.linear.y
            controleff[0,2,0] = controleff_twist.linear.z
            controleff[0,3,0] = controleff_twist.angular.x
            controleff[0,4,0] = controleff_twist.angular.y
            controleff[0,5,0] = controleff_twist.angular.z
            controleffs = np.append(controleffs,controleff, axis=0) # stack the matrices
        ax_controlefforts.plot(self.time, controleffs[:,0,0], linewidth=2.0, color='tab:blue', label="lin x") # plot linear x errfort
        ax_controlefforts.plot(self.time, controleffs[:,1,0], linewidth=2.0, color='tab:orange', label="lin y") # plot linear y errfort
        ax_controlefforts.plot(self.time, controleffs[:,2,0], linewidth=2.0, color='tab:green', label="lin z") # plot linear z errfort
        ax_controlefforts.plot(self.time, controleffs[:,3,0], linewidth=2.0, color='tab:red', label="ang x") # plot angular x errfort
        ax_controlefforts.plot(self.time, controleffs[:,4,0], linewidth=2.0, color='tab:purple', label="ang y") # plot angular y errfort
        ax_controlefforts.plot(self.time, controleffs[:,5,0], linewidth=2.0, color='tab:cyan', label="ang z") # plot angular z errfort
        ax_controlefforts.legend(loc='center left', bbox_to_anchor=(1, 0.5))

    ### SUBPLOT 3 ### : Plot the 3D path of the object center
        # check if data is available
        if (np.array(self.poses)==None).all():
            response = TriggerResponse()
            response.success = False
            response.message = "Plot aborted - Some of the data required for the plots is missing"
            return response

        positions = np.zeros((0,3,1))
        for pose in self.poses:
            position = np.array([pose.position.x, pose.position.y, pose.position.z]).reshape((1,3,1))
            positions = np.append(positions, position, axis=0)
        X = positions[:,0,0]
        Y = positions[:,1,0]
        Z = positions[:,2,0]
        ax_poses.plot(X, Y, Z, color='tab:red')
        # Create cubic bounding box to simulate equal aspect ratio
        max_range = np.array([X.max()-X.min(), Y.max()-Y.min(), Z.max()-Z.min()]).max()
        Xb = 0.5*max_range*np.mgrid[-1:2:2,-1:2:2,-1:2:2][0].flatten() + 0.5*(X.max()+X.min())
        Yb = 0.5*max_range*np.mgrid[-1:2:2,-1:2:2,-1:2:2][1].flatten() + 0.5*(Y.max()+Y.min())
        Zb = 0.5*max_range*np.mgrid[-1:2:2,-1:2:2,-1:2:2][2].flatten() + 0.5*(Z.max()+Z.min())
        # Comment or uncomment following both lines to test the fake bounding box:
        for xb, yb, zb in zip(Xb, Yb, Zb):
            ax_poses.plot([xb], [yb], [zb], 'w')

    # Save figure
        Path.cwd().joinpath('plots').mkdir(parents=False, exist_ok=True)
        plotfile = str(Path.cwd().joinpath('plots', 'ControlDataLogger_{}.pdf'.format(int(rospy.get_time()))))
        try:
            # save figure as pdf with the name including the integer seconds from the float time
            plt.savefig(plotfile) 
        except:
            response = TriggerResponse()
            response.success = False
            response.message = "Plot could not be saved"
            return response

        response = TriggerResponse()
        response.success = True
        response.message = "Plot saved to {}".format(plotfile)
        return response

    def export_system_data(self) -> None:
        # Create Filepath
        Path.cwd().joinpath('visual_data').mkdir(parents=False, exist_ok=True)
        picklefile = str(Path.cwd().joinpath('visual_data', 'ControlDataLogger_{}.p'.format(int(rospy.get_time()))))

        # Create dictionary object to serialize
        data={"cornerpoints" : self.cornerpoints, 
              "controlefforts" : self.controlefforts,
              "poses" : self.poses,
              "time" : self.time}
              
        # dump data into pickle file
        pickle.dump(data, open(picklefile, "wb" ))
        rospy.loginfo("Dumped all Data in ControlDataLogger into {}".format(picklefile))
        
       


# Main function.
if __name__ == "__main__":
    rospy.init_node('visualize_control') # init ROS node named visualize_control
    rospy.loginfo('#Node visualize_control running#')
    
    visualizer = ControlVisualizer()  # create instance
    rospy.on_shutdown(visualizer.dataLogger.export_system_data)
    
    rospy.spin()
